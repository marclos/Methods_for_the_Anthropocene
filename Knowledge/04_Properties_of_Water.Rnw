\documentclass{tufte-handout}

\title{}
% \date{}

\begin{document}

\maketitle

\section{Lake Stratification}

What is lake stratification?  Why does it occur?  What are the implications for lake ecology?

\begin{figure}
  \includegraphics{graphics/LakeModelR_conceptart.png}
  \caption{Lake stratification.  Source: \url{https://www.lakeaccess.org/lake-ecology/stratification}}
\end{figure}


href{https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-ntl&identifier=1&revision=60}{North Temperate Lakes LTER: Chemical Limnology of Primary Study Lakes: Nutrients, pH and Carbon 1981 - current}


<<>>=
# Model lake stratification using LakeR

# Load the LakeModelR package
library("LakeModelR")
@


\subsection{Modeling Lake Temperatures}

<<echo=FALSE>>=
#' Example workflow to run the 1D integral energy model
#' Long-term Mendota data were obtained from North Temperate Lakes Long Term
#' Ecological Research program (#DEB-1440297)
#' @author: Robert Ladwig
#' @email: ladwigjena@gmail.com

## CLEAN WORKSPACE
rm(list = ls())

## INSTALL PACKAGE
# install.packages("remotes")
# require(remotes)
# remotes::install_github("robertladwig/LakeModelR")

## LOAD PACKAGE(S)
library(LakeModelR)
require(tidyverse)

## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth (units?)
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step

## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = system.file('extdata', 'bathymetry.csv',
                            package = 'LakeModelR'),
                            dx = dx, nx = nx)

## ATMOSPHERIC BOUNDARY CONDITIONS
meteo_all <- provide_meteorology(meteofile = system.file('extdata', 'meteorology.csv',
                            package = 'LakeModelR'),
                            secchifile = NULL)

### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 365 *24 * 3600 # seconds
total_runtime = endTime / 24 / 3600 # days

# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all, total_runtime = total_runtime, dt = dt, method = "integrate", secchi = F)

## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt', package = 'LakeModelR'), nx = nx, dx = dx, depth = hyps_all[[2]], processed_meteo = meteo_all[[1]])

## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini, startTime = startTime, endTime =  endTime, ice = FALSE, Hi = 0, iceT = 6,
                          supercooled = 0,kd_light = 0.5,
                          sw_factor = 1.0, zmax = zmax,
                          nx = nx, dt = dt,
                          dx = dx, area = hyps_all[[1]], # area
                          depth = hyps_all[[2]], # depth
                          volume = hyps_all[[3]], # volume
                          daily_meteo = meteo,
                          Cd = 0.0013,
                          scheme = 'implicit')

## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
avgtemp = res$average

## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
@

<<echo=FALSE>>=
## AVERAGE TEMPERATURES IN EPILIMNION AND HYPOLIMNION
ggplot(avgtemp) +
  geom_line(aes(time, epi, col = 'epilimnion')) +
  geom_line(aes(time, hyp, col = 'hypolimnion')) +
  geom_line(aes(time, tot, col = 'total')) +
  theme_minimal()
@


<<echo=FALSE>>=
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time

## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
                    'ice_h' = ice)

## HEATMAP OF WATER TEMPERATURE WITH THERMOCLINE DEPTH AND ICE THICKNESS
ggplot(m.df, aes((time), dx*as.numeric(as.character(variable)))) +
  geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
  scale_fill_gradientn(limits = c(-1,30),
                       colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
  theme_minimal()  +xlab('Time') +
  ylab('Depth [m]') +
  labs(fill = 'Temp [degC]')+
  geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
  geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
  scale_y_reverse()
@


<<echo=FALSE, eval=FALSE>>=

## RUN CUSTOM WATER QUALITY CODE EXAMPLE
require(LakeMetabolizer)

## PROVIDE A FUNCTION FOR YOUR WATER QUALITY BOUNDARY CONDITIONS, HERE FOR OXYGEN
water_quality_boundary_conditions <- function(WQ, TEMP, WIND, AREA, VOLUME, ICE, dt, dx, nx,
                                              EFF_AREA = 0.05,
                                              FVOL = 1.5,
                                              DO2 = NA,
                                              FRED = 1.0,
                                              DELTA_DBL = 1/1000){
  VAR = WQ

  ## SURFACE OXYGEN DEPENDS ON EXCHANGE WITH ATMOPSHERE, HERE WITH PISTON VELOCITY
  k600 =  k600.2.kGAS.base(k.vachon.base(wnd = WIND,
                                         lake.area = max(AREA)),
                                         temperature = TEMP[1], gas = "O2")/86400
  ## DEFINE OXYGEN SATURATION IN ATMOSPHERE
  o2sat = o2.at.sat.base(temp = TEMP[1],
                         altitude = 270)

  ## WE ASSUME LESS EXCHANGE DURING ICE
  if (ICE){
    k600 = 1e-4/86400
  }

  PART_VOLUME <- (VOLUME * 1)/sum(VOLUME)

  ## SURFACE BOUNDARY CONDITION: VOLUME FLUX AND ATMOSPHERIC EXCHANGE
  VAR[1] = VAR[1] +
    ((FVOL/86400) * dt* PART_VOLUME[1] * 1.08^(TEMP[1]-20) +
       (k600 * (o2sat - VAR[1])) * dt/dx * VOLUME[nx])/VOLUME[1]

  ## VOLUME FLUX FOR ALL LAYERS INBETWEEN
  for (i in 2:(nx-1)){
    VAR[i] = VAR[i] +
      (FVOL/86400) * dt * PART_VOLUME[i] * 1.08^(TEMP[i]-20)
  }

  ## BOTTOM BOUNDARY CONDITION: VOLUME FLUX AND SEDIMENT FLUX
  if (is.na(DO2)){
    DO2 = exp((-4.410 + (773.8)/(TEMP[nx] + 273.15) - ((506.4)/(TEMP[nx] + 73.15))^2))/1e4
  }

  BBL_AREA = AREA * EFF_AREA
  VAR[nx] = VAR[nx] +
    ((FVOL/86400) * dt * PART_VOLUME[nx] +
       (- BBL_AREA[nx] * FRED/86400  - BBL_AREA[nx] * (DO2)/DELTA_DBL * VAR[nx]) *
       dt/VOLUME[nx])  * 1.08^(TEMP[nx]-20)

  ## NO CONCENTRATIONS BELOW NULL ARE FEASIBLE
  VAR[which(VAR < 0)] = 0

  return(VAR)
}

## DEFINE INITIAL WATER QUALITY PROFILE
wq_ini <- rep(10, nx)

## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
                         startTime = startTime,
                         endTime =  endTime,
                         ice = FALSE,
                         Hi = 0,
                         iceT = 6,
                         supercooled = 0,
                         kd_light = 0.5,
                         sw_factor = 1.0,
                         zmax = zmax,
                         nx = nx,
                         dt = dt,
                         dx = dx,
                         area = hyps_all[[1]], # area
                         depth = hyps_all[[2]], # depth
                         volume = hyps_all[[3]], # volume
                         daily_meteo = meteo,
                         Cd = 0.0013,
                         scheme = 'implicit',
                         water.quality = TRUE,
                         wq = wq_ini)

## SAVE THE RESULTS
ice = res$icethickness
avgtemp = res$average
dissoxygen = res$water.quality

## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time

df.dissoxygen <- data.frame(cbind(time, t(dissoxygen)) )
colnames(df.dissoxygen) <- c("time", as.character(paste0(seq(1,nrow(dissoxygen)))))
m.df.dissoxygen <- reshape2::melt(df.dissoxygen, "time")
m.df.dissoxygen$time <- time

## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
                      'ice_h' = ice)

## HEATMAP OF DISSOLVED OXYGEN WITH THERMOCLINE DEPTH AND ICE THICKNESS
ggplot(m.df.dissoxygen, aes((time), dx*as.numeric(as.character(variable)))) +
    geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
    scale_fill_gradientn(limits = c(0,15),
                         colours = rev(RColorBrewer::brewer.pal(9, 'YlGnBu')))+
    theme_minimal()  +xlab('Time') +
    ylab('Depth [m]') +
    labs(fill = 'Diss. Oxygen [gm-3]')+
    geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
    geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
    scale_y_reverse()
@




<<>>=
#convert_DO(x, from = NULL, to = NULL, S = NULL, t = NULL, P = NULL, simplify = TRUE)
library(respR)
# Convert a numeric value to units which do not require t, S and P
convert_DO(8.21, from = "mg/L", to = "%Air", S=1, t=20)

plot(1:30, convert_DO(8, from = "mg/L", to = "%Air", S=1, t=1:30), las=1, ylab="DO [%Air]", xlab="Temperature [°C]", type="l", ylim=c(0,100))
lines(1:30, convert_DO(5, from = "mg/L", to = "%Air", S=1, t=1:30), col="red")

# Convert a numeric value to units which require t, S and P
convert_DO(100, from = "%Air", to = "mg L-1", S = 33, t = 18)
#> convert_DO: Input or output units require Atmospheric Pressure input (i.e. P = ??).
#> Default value of P = 1.013253 bar has been used.
#> [1] 7.752073

plot(1:35, convert_DO(100, from = "%Air", to = "mg L-1", S = 33, t=1:35), las=1, ylab="DO [Mg/L]", xlab="Temperature [°C]", type="l", ylim=c(0,14))
lines(1:35, convert_DO(70, from = "%Air", to = "mg L-1", S = 33, t=1:35), col="red")
lines(1:35, convert_DO(70, from = "%Air", to = "mg L-1", S = 1, t=1:35), col="blue")

@


\subsection{Lake Mixing}


<<>>=

<<>>=
# Model Oxygen Concentrations in Water

# Parameters
temperature <- seq(0, 30, by = 1)  # Temperature in degrees Celsius
bod <- seq(1, 10, by = 1)  # Biological Oxygen Demand (BOD) in mg/L
salinity <- seq(0, 30, by = 1)  # Salinity in ppt (parts per thousand)

# Model coefficients (example values, replace with actual coefficients)
coeff_temp <- 0.5
coeff_bod <- -0.2
coeff_salinity <- -0.1
intercept <- 10

# Function to model oxygen concentration
model_oxygen_concentration <- function(temp, bod, salinity) {
  return(intercept + coeff_temp * temp + coeff_bod * bod + coeff_salinity * salinity)
}

# Generate a grid of combinations of temperature, BOD, and salinity
grid <- expand.grid(temperature = temperature, bod = bod, salinity = salinity)

# Model oxygen concentration for each combination
grid$oxygen_concentration <- model_oxygen_concentration(grid$temperature, grid$bod, grid$salinity)

# Plotting the results
library("scatterplot3d")

scatterplot3d(grid$temperature, grid$bod, grid$salinity, color = "blue",
              main = "Oxygen Concentration Model",
              xlab = "Temperature (Celsius)",
              ylab = "BOD (mg/L)",
              zlab = "Salinity (ppt)",
              pch = 16,
              type = "h")

# Add model surface
fit <- lm(oxygen_concentration ~ temperature + bod + salinity, data = grid)
fit_surface <- predict(fit, newdata = grid)
scatterplot3d(grid$temperature, grid$bod, grid$salinity, color = "blue", add = TRUE,
              grid = FALSE, fit = fit_surface)
@


\end{document}
